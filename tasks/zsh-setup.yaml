- name: Install ZSH
  block:
    - apt:
        name: zsh
  become: true
  tags: &tags_for_zsh_tasks ['zsh','personal','work' ]

- name: Change shell to zsh
  block:
    - shell: chsh -s $(which zsh)
  become: true
  tags: *tags_for_zsh_tasks

- name: Check that the .oh-my-zsh exists
  stat:
    path: /home/kdlocpanda/.oh-my-zsh
  register: oh_my_stats
  tags: *tags_for_zsh_tasks

- name: Oh-My-Zsh
  shell: curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh > ~/.oh-my-installer && chmod +x ~/.oh-my-installer && ~/.oh-my-installer
  become: true
  tags: *tags_for_zsh_tasks
  when: oh_my_stats.stat.exists == False
  become_user: kdlocpanda

- name: Install zsh-autosuggestions
  ansible.builtin.git:
    repo: 'https://github.com/zsh-users/zsh-autosuggestions.git'
    dest: "~/.oh-my-zsh/plugins/zsh-autosuggestions"
  become: true
  become_user: kdlocpanda
  tags: *tags_for_zsh_tasks

- name: Install zsh-syntax-highlighting
  ansible.builtin.git:
    repo: 'https://github.com/zsh-users/zsh-syntax-highlighting.git'
    dest: "~/.oh-my-zsh/plugins/zsh-syntax-highlighting"
  become: true
  become_user: kdlocpanda
  tags: *tags_for_zsh_tasks

- name: Add Plugins to .zshrc
  lineinfile:
    path: /home/kdlocpanda/.zshrc
    regexp: '^plugins=.*'
    line: 'plugins=(ansible git python zsh-autosuggestions zsh-syntax-highlighting)'
    create: yes
  become: true
  become_user: kdlocpanda
  tags: *tags_for_zsh_tasks

- name: Define functions for .zshrc
  tags: *tags_for_zsh_tasks
  set_fact:
    zshrc_functions: |
      switch_to_personal() {
        ssh-add -D
        ssh-add ~/.ssh/id_ed25519_personal
        git config --global user.email "joshua.yorko@gmail.com"
        echo "Switched to Personal SSH and Git Config."
      }

      switch_to_work() {
        ssh-add -D
        ssh-add ~/.ssh/id_ed25519_work
        git config --global user.email "joshua.yorko@gainwelltechnologies.com"
        echo "Switched to Work SSH and Git Config."
      }

      edir() {
          local search_term=$1
          local editor_option=$2

          # Check if a search term is provided
          if [ -z "$search_term" ]; then
              echo "‚ùå Provide a search term."
              return 1
          fi

          # Check for required tool: fzf
          if ! command -v fzf >/dev/null 2>&1; then
              echo "‚ùå Install 'fzf'."
              return 1
          fi

          # Find directories matching the search term and select one using fzf
          local selected_dir=$(find ~ ~/projects -type d -iname "*$search_term*" 2>/dev/null | fzf --prompt="Select a directory: ")

          # Check if a directory was selected
          if [ -n "$selected_dir" ]; then
              case $editor_option in
                  -c) 
                      if command -v code-insiders >/dev/null 2>&1; then
                          code-insiders "$selected_dir"
                      else
                          echo "‚ùå 'code-insiders' is not installed."
                          return 1
                      fi
                      ;;
                  -o) cd "$selected_dir" ;;  # Only change to the selected directory
                  *) nvim "$selected_dir" ;;  # Default to nvim if no option or unrecognized option is given
              esac
          else
              echo "üö´ No directory selected."
          fi
      }



- name: Add functions to .zshrc
  lineinfile:
    path: /home/kdlocpanda/.zshrc
    line: "{{ zshrc_functions }}"
    create: yes
  become: true
  become_user: kdlocpanda
  tags: *tags_for_zsh_tasks


- name: Set ZSH as default shell in .bashrc
  lineinfile:
    path: /home/kdlocpanda/.bashrc
    line: 'exec zsh'
    create: yes
  become: true
  become_user: kdlocpanda
  tags: *tags_for_zsh_tasks

- name: Set ZSH as default shell in .bash_profile
  lineinfile:
    path: /home/kdlocpanda/.bash_profile
    line: 'exec zsh'
    create: yes
  become: true
  become_user: kdlocpanda
  tags: *tags_for_zsh_tasks


